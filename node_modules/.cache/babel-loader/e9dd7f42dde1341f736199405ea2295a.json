{"ast":null,"code":"var _jsxFileName = \"/Users/pedraamnikzad/Desktop/pedraamio/src/Worldgenerator/Worldgenerator.js\",\n    _s = $RefreshSig$();\n\nimport '../App.css';\nimport { useEffect } from 'react';\nimport { useSpring, animated } from \"react-spring\";\nimport styled from \"styled-components\";\nimport Button from \"../Components/Button.js\";\nimport Footer from \"../Components/Footer.js\";\nimport PR from \"../Components/PedraamResume.pdf\";\nimport GenVid from \"../Components/PortfoVids/worldsdemovid.mp4\";\nimport { FaLinkedin, FaGithub, FaHandPaper } from \"react-icons/fa\";\nimport Homeheader from '../Components/Homeheader';\nimport { colorToRgba } from '@react-spring/shared';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderContainer = styled.div`\n    display: flex;\n    justify-content: left;\n    margin-top: 1%;\n    margin-left: 1%;\n`;\n_c = HeaderContainer;\nconst HeaderText = styled.h1`\n    font-family: Arial, Helvetica, sans-serif;\n    margin-top: -2%;\n    font-size: 35px;\n    color: var(--blue);\n    display: flex;\n    justify-content: center;\n`;\n_c2 = HeaderText;\nconst StyledP = styled.p`\n    margin-top: -1%;\n    color: var(--blue);\n    font-size: 17px;\n    font-family: Arial, Helvetica, sans-serif;\n    display: flex;\n    justify-content: center;\n    margin-left: 3%;\n    margin-right: 3%;\n`;\n_c3 = StyledP;\nconst StyledL = styled.h2`\n    display: flex;\n    color: var(--blue);\n    font-family: Arial, Helvetica, sans-serif;\n    justify-content: center;\n    transition: all 0.3s ease-in-out;\n    font-size: 20px;\n    margin-top: -0.5%;\n\n`;\n_c4 = StyledL;\nconst StyledA = styled.a`\n    text-decoration: none;\n    color: var(--blue);\n    transition: all 0.3s ease-in-out;\n    &:hover {\n        color: var(--darkblue);\n\n    }\n`;\n_c5 = StyledA;\nconst ContentBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n`;\n_c6 = ContentBox;\nconst StyledVid = styled.video`\n    border: 5px solid var(--blue);\n    border-radius: 9%;\n`;\n_c7 = StyledVid;\n\nfunction Worldgenerator() {\n  _s();\n\n  useEffect(() => {\n    document.querySelector('video').playbackRate = 1.5;\n  });\n  const spinIn = useSpring({\n    config: {\n      duration: 300\n    },\n    from: {\n      transform: \"rotateZ(360deg)\",\n      opacity: \"0\"\n    },\n    to: {\n      transform: \"rotateZ(0deg)\",\n      opacity: \"1\"\n    },\n    delay: 400\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gitlet\",\n    children: [/*#__PURE__*/_jsxDEV(HeaderContainer, {\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: spinIn,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          buttonStyle: \"home\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HeaderText, {\n      children: \"World Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StyledP, {\n      children: [\"I created a world generator and then turned it into a game, aptly named \\\"Star Worlds\\\", where you race versus the AI to collect the most stars. The worlds are generated psuedorandomly from a seed (number) the user can manually input. Psuedorandomly is a fancy way of saying it deterministicly generates random worlds, meaning no matter how many times I enter 55 it will generate the same world each time. However, each unique seed should theoretically generate a different world.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 496\n      }, this), \"To generate the worlds, first I generate a random number of rooms with a random height and width. Then I generate a random number of hallways initialized at a room wall using DFS until it hits another room. Finally, I place all the items and characters on random squares within the confines of the rooms and hallways.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 818\n      }, this), \"You can move your character with \\u201CWASD\\u201D and throw balls in any direction with \\u201CIJKL\\u201D which will capture a star on collision. The balls only have the power to go over 3 walls, after which they perish. There are portals which only the enemy has access to as a way to compensate for your ball throwing ability. The enemy uses the A* algorithm to find the nearest star and even factors portals into its heuristic. The game also has the ability to save progress and replay last saved game from video.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StyledL, {\n      children: /*#__PURE__*/_jsxDEV(StyledA, {\n        href: \"https://github.com/Pedraamy/Star-Worlds\",\n        target: \"_blank\",\n        children: \"<Source Code>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ContentBox, {\n      className: \"content--box\",\n      children: [/*#__PURE__*/_jsxDEV(StyledVid, {\n        width: \"700\",\n        height: \"445\",\n        autoPlay: true,\n        loop: true,\n        muted: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: GenVid,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(animated.div, {\n        style: spinIn,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          buttonStyle: \"projb\",\n          children: \"Projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Worldgenerator, \"LZ/TlEPW7DE3I+rCoDcsGepkDQg=\", false, function () {\n  return [useSpring];\n});\n\n_c8 = Worldgenerator;\nexport default Worldgenerator;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"HeaderContainer\");\n$RefreshReg$(_c2, \"HeaderText\");\n$RefreshReg$(_c3, \"StyledP\");\n$RefreshReg$(_c4, \"StyledL\");\n$RefreshReg$(_c5, \"StyledA\");\n$RefreshReg$(_c6, \"ContentBox\");\n$RefreshReg$(_c7, \"StyledVid\");\n$RefreshReg$(_c8, \"Worldgenerator\");","map":{"version":3,"sources":["/Users/pedraamnikzad/Desktop/pedraamio/src/Worldgenerator/Worldgenerator.js"],"names":["useEffect","useSpring","animated","styled","Button","Footer","PR","GenVid","FaLinkedin","FaGithub","FaHandPaper","Homeheader","colorToRgba","HeaderContainer","div","HeaderText","h1","StyledP","p","StyledL","h2","StyledA","a","ContentBox","StyledVid","video","Worldgenerator","document","querySelector","playbackRate","spinIn","config","duration","from","transform","opacity","to","delay"],"mappings":"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","sourcesContent":["import '../App.css';\nimport { useEffect } from 'react';\nimport {useSpring, animated} from \"react-spring\";\nimport styled from \"styled-components\"\nimport Button from \"../Components/Button.js\";\nimport Footer from \"../Components/Footer.js\";\nimport PR from \"../Components/PedraamResume.pdf\"\n\nimport GenVid from \"../Components/PortfoVids/worldsdemovid.mp4\"\n\nimport {FaLinkedin, FaGithub, FaHandPaper} from \"react-icons/fa\";\nimport Homeheader from '../Components/Homeheader';\nimport { colorToRgba } from '@react-spring/shared';\n\nconst HeaderContainer = styled.div`\n    display: flex;\n    justify-content: left;\n    margin-top: 1%;\n    margin-left: 1%;\n`;\n\nconst HeaderText = styled.h1`\n    font-family: Arial, Helvetica, sans-serif;\n    margin-top: -2%;\n    font-size: 35px;\n    color: var(--blue);\n    display: flex;\n    justify-content: center;\n`;\n\nconst StyledP = styled.p`\n    margin-top: -1%;\n    color: var(--blue);\n    font-size: 17px;\n    font-family: Arial, Helvetica, sans-serif;\n    display: flex;\n    justify-content: center;\n    margin-left: 3%;\n    margin-right: 3%;\n`;\n\nconst StyledL = styled.h2`\n    display: flex;\n    color: var(--blue);\n    font-family: Arial, Helvetica, sans-serif;\n    justify-content: center;\n    transition: all 0.3s ease-in-out;\n    font-size: 20px;\n    margin-top: -0.5%;\n\n`;\n\nconst StyledA = styled.a`\n    text-decoration: none;\n    color: var(--blue);\n    transition: all 0.3s ease-in-out;\n    &:hover {\n        color: var(--darkblue);\n\n    }\n`;\n\nconst ContentBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n`;\n\nconst StyledVid = styled.video`\n    border: 5px solid var(--blue);\n    border-radius: 9%;\n`;\n\nfunction Worldgenerator() {\n    useEffect(() => {\n        document.querySelector('video').playbackRate = 1.5;\n      });\n    const spinIn = useSpring({\n        config: {duration: 300},\n        from: {transform: \"rotateZ(360deg)\", opacity: \"0\"},\n        to: {transform: \"rotateZ(0deg)\", opacity: \"1\"},\n        delay: 400,\n    });\n  return (\n    <div className=\"gitlet\">\n        <HeaderContainer>\n            <animated.div style={spinIn}>\n                <Button buttonStyle=\"home\">Home</Button>\n            </animated.div>\n        </HeaderContainer>\n        <HeaderText>World Generator</HeaderText>\n        <StyledP>I created a world generator and then turned it into a game, aptly named \"Star Worlds\", where you race versus the AI to collect the most stars. The worlds are generated psuedorandomly from a seed (number) the user can manually input. Psuedorandomly is a fancy way of saying it deterministicly generates random worlds, meaning no matter how many times I enter 55 it will generate the same world each time. However, each unique seed should theoretically generate a different world.<br/>To generate the worlds, first I generate a random number of rooms with a random height and width. Then I generate a random number of hallways initialized at a room wall using DFS until it hits another room. Finally, I place all the items and characters on random squares within the confines of the rooms and hallways.<br/>You can move your character with “WASD” and throw balls in any direction with “IJKL” which will capture a star on collision. The balls only have the power to go over 3 walls, after which they perish. There are portals which only the enemy has access to as a way to compensate for your ball throwing ability. The enemy uses the A* algorithm to find the nearest star and even factors portals into its heuristic. The game also has the ability to save progress and replay last saved game from video.</StyledP>\n        <StyledL><StyledA href=\"https://github.com/Pedraamy/Star-Worlds\" target=\"_blank\">&lt;Source Code&gt;</StyledA></StyledL>\n        <ContentBox className=\"content--box\">\n            <StyledVid width=\"700\" height=\"445\" autoPlay loop muted>\n                <source src={GenVid} type=\"video/mp4\" />\n            </StyledVid>\n            <animated.div style={spinIn}>\n                <Button buttonStyle=\"projb\">Projects</Button>\n            </animated.div>\n        </ContentBox>\n        <Footer />\n    </div>\n  );\n}\n\nexport default Worldgenerator;"]},"metadata":{},"sourceType":"module"}